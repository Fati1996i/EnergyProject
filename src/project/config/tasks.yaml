perf_task:
  description: >
    Run `perf` with energy counters to measure energy and performance metrics
    for the script `retrieved_code.py` using the command:
    `perf stat -e power/energy-pkg/ python retrieved_code.py`.
  expected_output: >
    A report generated by `perf` showing energy usage in Joules,
    CPU cycles, instructions, cache misses, and other metrics.
  agent: perf_analyzer
  input_variables:
    - command
  output_variable: perf_output

optimize_task:
  description: >
    You are given the following perf output:
    ---
    {perf_output}
    ---
    Suggest improvements to make the code in `retrieved_code.py` more energy-efficient
    while preserving functionality.
  expected_output: >
    A more energy-efficient version of the code based on the profiling report.
  agent: energy_optimizer
  input_variables:
    - perf_output
  output_variable: optimized_code

save_optimized_code:
  description: >
    Save the optimized code to a file named `optimized_code.py`.
  expected_output: >
    File `optimized_code.py` is written.
  agent: code_saver
  input_variables:
    - optimized_code
  output_variable: save_status

validate_functionality:
  description: >
    Run the optimized code file `optimized_code.py` to verify it runs correctly.
    If any error occurs, debug and fix it using the LLM until it executes successfully.
  expected_output: >
    Final output of the corrected and executed optimized code.
  agent: validator
  input_variables:
    - command
  output_variable: execution_output
  
rerun_perf_task:
  description: >
    Run `perf` again using the optimized code file `optimized_code.py` to measure energy usage.
  expected_output: >
    A second perf report for the optimized code.
  agent: perf_analyzer
  input_variables:
    - command
  output_variable: optimized_perf_output

summarize_results:
  description: >
    You are given two perf reports — one before and one after optimization — along with validation output.
    Your job is to:
      1. Show the original and optimized perf outputs side-by-side.
      2. Highlight any reductions in energy usage and runtime.
      3. Conclude whether the optimization was successful in improving energy efficiency without breaking functionality.
    ---
    Original Perf Output:
    {perf_output}

    Optimized Perf Output:
    {optimized_perf_output}

    Optimized Execution Output:
    {execution_output}
    ---
  expected_output: >
    A clear summary including:
    - Original and optimized energy/time stats.
    - Whether energy efficiency improved.
    - Whether the optimized code still produces correct results.
    - A final judgment on optimization success.
    - Now write this comparison into a file using the Summary Saver Tool.
  agent: summary_evaluator
  input_variables:
    - perf_output
    - optimized_perf_output
    - execution_output
  output_variable: summary_report

